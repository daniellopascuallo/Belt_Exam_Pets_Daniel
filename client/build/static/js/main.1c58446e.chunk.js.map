{"version":3,"sources":["views/Main.jsx","components/PetForm.jsx","views/New.jsx","views/Show.jsx","views/Edit.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Main","props","useState","pets","setPets","useEffect","Axios","get","then","response","data","results","catch","err","console","log","to","className","map","p","i","key","name","type","_id","PetForm","inputs","handleInputs","handleSubmit","errors","submitValue","description","skillOne","skillTwo","skillThree","onSubmit","htmlFor","id","onChange","value","message","New","initialPet","initialErrors","pet","setPet","setErrors","e","target","preventDefault","post","navigate","Show","onClick","delete","Edit","editPet","setEditPet","put","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1c58446e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport { Link } from '@reach/router';\r\nimport '../Main.css';\r\n\r\nconst Main = props => {\r\n\r\n    const [pets, setPets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        Axios.get(\"http://localhost:8000/api/pets\")\r\n            .then(response => setPets(response.data.results))\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h3>These pets are looking for a good home</h3>\r\n            <Link to=\"/new\">Add a pet to the Shelter</Link>\r\n            <table className=\"col-6 mx-auto\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Type</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        pets.map((p, i) => {\r\n                            return <tr key={i}>\r\n                                <td>{p.name}</td>\r\n                                <td>{p.type}</td>\r\n                                <td><Link to={`/pet/${p._id}`}>Details</Link> | <Link to={`/edit/${p._id}`}>Edit</Link>\r\n                                </td>\r\n                            </tr>\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\n\r\nconst PetForm = props => {\r\n    const { inputs, handleInputs, handleSubmit, errors, submitValue } = props;\r\n    const { name, type, description, skillOne, skillTwo, skillThree } = inputs;\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"col-5 mx-auto bg-light p-4 rounded\" onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Pet Name:</label>\r\n                    <input className=\"form-control\" type=\"text\" name=\"name\" id=\"name\" onChange={handleInputs} value={name} />\r\n                    <span className=\"text-danger\">{errors.name ? errors.name.message : \"\"}</span>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"type\">Pet Type:</label>\r\n                    <input className=\"form-control\" type=\"text\" name=\"type\" id=\"type\" onChange={handleInputs} value={type} />\r\n                    <span className=\"text-danger\">{errors.type ? errors.type.message : \"\"}</span>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"description\">Pet Description:</label>\r\n                    <input className=\"form-control\" type=\"text\" name=\"description\" id=\"description\" onChange={handleInputs} value={description} />\r\n                    <span className=\"text-danger\">{errors.description ? errors.description.message : \"\"}</span>\r\n                </div>\r\n                <h6>Skills (Optional):</h6>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"skillOne\">skill One:</label>\r\n                    <input className=\"form-control\" type=\"text\" name=\"skillOne\" id=\"skillOne\" onChange={handleInputs} value={skillOne} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"skillTwo\">skill Two:</label>\r\n                    <input className=\"form-control\" type=\"text\" name=\"skillTwo\" id=\"skillTwo\" onChange={handleInputs} value={skillTwo} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"skillThree\">skill Three:</label>\r\n                    <input className=\"form-control\" type=\"text\" name=\"skillThree\" id=\"skillThree\" onChange={handleInputs} value={skillThree} />\r\n                </div>\r\n                <input className=\"btn btn-success\" type=\"submit\" value={submitValue} />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PetForm;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { navigate, Link } from '@reach/router';\r\nimport PetForm from '../components/PetForm';\r\n\r\nconst New = props => {\r\n    const initialPet = {\r\n        name: \"\",\r\n        type: \"\",\r\n        description: \"\",\r\n        skillOne: \"\",\r\n        skillTwo: \"\",\r\n        skillThree: \"\"\r\n    }\r\n    const initialErrors = {\r\n        name: \"\",\r\n        type: \"\",\r\n        description: \"\",\r\n        skillOne: \"\",\r\n        skillTwo: \"\",\r\n        skillThree: \"\"\r\n    }\r\n    const [pet, setPet] = useState(initialPet);\r\n    const [errors, setErrors] = useState(initialErrors);\r\n\r\n    const handleForm = e => {\r\n        setPet({\r\n            ...pet,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        setErrors(initialErrors);\r\n        Axios.post(\"http://localhost:8000/api/create/pet\", pet)\r\n            .then(response => {\r\n                if(response.data.results){\r\n                    setPet(initialPet);\r\n                    navigate(\"/\")\r\n                }\r\n                else{\r\n                    console.log(response.data)\r\n                    setErrors(response.data)\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Know a pet needing a home?</h2>\r\n            <Link to=\"/\">Back to home</Link>\r\n            <PetForm \r\n            inputs={pet}\r\n            handleInputs={handleForm}\r\n            handleSubmit={handleSubmit}\r\n            errors={errors}\r\n            submitValue=\"Add Pet\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default New;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport { navigate, Link} from '@reach/router';\r\n\r\nconst Show = props => {\r\n    const initialPet = {\r\n        name: \"\",\r\n        type: \"\",\r\n        description: \"\",\r\n        skillOne: \"\",\r\n        skillTwo: \"\",\r\n        skillThree: \"\"\r\n    }\r\n    const [pet, setPet] = useState(initialPet);\r\n\r\n    useEffect(() => {\r\n        Axios.get(`http://localhost:8000/api/pet/${props.id}`)\r\n            .then(response => setPet(response.data.results))\r\n            .catch(err => console.log(err));\r\n    }, [props])\r\n\r\n    const handleAdopt = () => {\r\n        Axios.delete(`http://localhost:8000/api/delete/pet/${props.id}`)\r\n            .then(response => navigate(\"/\"))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Details about: {pet.name}</h2>\r\n            <Link to=\"/\">Back to home</Link>\r\n            <div className=\"col-4 mx-auto p-5\">\r\n                <h4>Pet Type: {pet.type}</h4>\r\n                <h4>Description: {pet.description}</h4>\r\n                <h4>Skills:</h4>\r\n                <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">{pet.skillOne}</li>\r\n                    <li className=\"list-group-item\">{pet.skillTwo}</li>\r\n                    <li className=\"list-group-item\">{pet.skillThree}</li>\r\n                </ul>\r\n                <br/>\r\n                <button className=\"btn btn-warning btn-outline-success\" onClick={handleAdopt}>Adopt {pet.name}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Show;","import React, { useState, useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport { navigate, Link } from '@reach/router';\r\nimport PetForm from '../components/PetForm';\r\n\r\nconst Edit = props => {\r\n    const initialPet = {\r\n        name: \"\",\r\n        type: \"\",\r\n        description: \"\",\r\n        skillOne: \"\",\r\n        skillTwo: \"\",\r\n        skillThree: \"\"\r\n    }\r\n    const initialErrors = {\r\n        name: \"\",\r\n        type: \"\",\r\n        description: \"\",\r\n        skillOne: \"\",\r\n        skillTwo: \"\",\r\n        skillThree: \"\"\r\n    }\r\n    const [editPet, setEditPet] = useState(initialPet);\r\n    const [errors, setErrors] = useState(initialErrors);\r\n\r\n    const handleForm = e => {\r\n        setEditPet({\r\n            ...editPet,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        setErrors(initialErrors);\r\n        Axios.put(`http://localhost:8000/api/update/pet/${props.id}`, editPet)\r\n            .then(response => {\r\n                if(response.data.results){\r\n                    setEditPet(initialPet);\r\n                    navigate(`/pet/${props.id}`);\r\n                }\r\n                else{\r\n                    console.log(response.data)\r\n                    setErrors(response.data)\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        Axios.get(`http://localhost:8000/api/pet/${props.id}`)\r\n            .then(response => setEditPet(response.data.results))\r\n            .catch(err => console.log(err));\r\n    }, [props])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Edit {editPet.name}</h2>\r\n            <Link to=\"/\">Back to home</Link>\r\n            <PetForm \r\n            inputs={editPet}\r\n            handleInputs={handleForm}\r\n            handleSubmit={handleSubmit}\r\n            errors={errors}\r\n            submitValue=\"Edit Pet\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Edit;\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Router } from '@reach/router';\nimport Main from './views/Main';\nimport New from './views/New';\nimport Show from './views/Show';\nimport Edit from './views/Edit';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Pet Shelter</h1>\n      <Router>\n        <Main path=\"/\" />\n        <New path=\"/new\" />\n        <Show path=\"/pet/:id\" />\n        <Edit path=\"/edit/:id\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}